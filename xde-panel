#!/usr/bin/perl

# in case we get executed (not sourced) as a shell program
eval 'exec perl -S $0 ${1+"@"}'
    if $running_under_some_shell;

use strict;

#
# are we installed or running in a sandbox?
#
use lib (-e '/usr/lib/perlpanel' ? '/usr/lib/perlpanel' : $ENV{PWD}.'/lib/');

use Glib qw(TRUE FALSE);
use Gtk2;

Gtk2::Rc->set_default_files("$ENV{HOME}/.gtkrc-2.0.xde");

use PerlPanel;

#
# set the values for prefix and libdir:
#
$PerlPanel::PREFIX = (-e '/usr' ? '/usr' : $ENV{PWD});
$PerlPanel::LIBDIR = (-e '/usr/lib/perlpanel' ? '/usr/lib/perlpanel' : $ENV{PWD}.'/lib/');
$PerlPanel::DEFAULT_THEME = 'Mist';

#
# if we're in a sandbox then it's handy to add ./src to the PATH:
#
$ENV{PATH} = $ENV{PATH}.':'.$ENV{PWD}.'/src' if (!-e '/usr');

Gtk2->init;

sub reparse {
	my ($root,$property) = @_;
	my ($type,$format,@data) = $root->property_get($property,undef,0,255,FALSE);
	if ($type and $data[0]) {
		Gtk2::Rc->reparse_all;
		Gtk2::Rc->parse_string("gtk-theme-name=\"$data[0]\"");
	}
}

{
	my $manager = Gtk2::Gdk::DisplayManager->get;
	my $dpy = $manager->get_default_display;
	my $screen = $dpy->get_default_screen;
	my $root = $screen->get_root_window;
	my $property = Gtk2::Gdk::Atom->new(_XDE_THEME_NAME=>FALSE);

	$root->set_events([qw(property-change-mask structure-mask substructure-mask)]);

	Gtk2::Gdk::Event->handler_set(sub{
		my ($event,$data) = @_;
		if (($event->type eq 'client-message' and $event->message_type->name eq "_GTK_READ_RCFILES") ||
		    ($event->type eq 'property-notify' and $event->atom->name eq "_XDE_THEME_NAME")) {
			reparse($root,$property);
			return;
		}
		Gtk2->main_do_event($event);
	},$root);

	reparse($root,$property);
}

#
# start the panel:
#
PerlPanel->new->init;

exit;

=pod

=head1 NAME

xde-panel - a wrapper for perlpanel for the X Desktop Environment

=head1 SYNOPSIS

B<xde-panel> I<CONFIGFILE>

=head1 DESCRIPTION

B<xde-panel> is a small wrapper script for the L<perlpanel(1)> panel
that provides the ability to specify a configuration file on the command
line as well as monitoring for an applying XDE GTK-2.0 theme changes to
be consistent with the window manager theme.  Otherwise, L<perlpanel(1)>
is invoked in a similar fashion to the original version.

The major purpose of the B<xde-panel> wrapper script is to change the
theme of the panel in accordance with the theme that is set for the
window manager.  This makes the panel appearance better, more consistent
with the window manager, and makes the panel appear to be native to the
window manager and desktop environment.

=head1 BEHAVIOUR

On startup, B<xde-panel> should wait for a window manager to appear.  If
the command L<xde-wait(1)>, is available, B<xde-panel> will use it to
wait for a window manager to appear or for 2 seconds if no window
manager appears.

Once a window manager has appeared or the operation has timed out
waiting for a window manager to appear, B<xde-panel> will test for the
window manager name by checking the C<_XDE_WM_NAME> property on the root
window.  If the command L<xde-identify(1)> is available, B<xde-panel>
will call it to set root window properties if no C<_XDE_WM_NAME>
property is available on the root window.  If a subsequent check of the
property still yields no window manager name, B<xde-panel> will use the
C<$XDG_CURRENT_DESKTOP> environment variable to determine which profile
to use.  If neither approach yields a profile name, the default profile
name, C<default>, will be used instead.

B<xde-panel> then checks the presence of a configuration file for the
profile in the user's XDG home configuration directory as indicated by
the C<$XDG_CONFIG_HOME> environment variable, or by default,
F<~/.config>.  The sub-directory C<xde-panel> is checked for the
presence of a sub-directory with the profile name and a configuration
file by the name of F<rc.xml>.  The resulting path is
F<~/.config/xde-panel/${PROFILE}/rc.xml>.

If a startup file does not exist, B<xde-panel> looks in the system XDG
configuration directories specified by the C<$XDG_CONFIG_DIRS>
environment variable, or F</etc/xdg> if not specified.  The typical path
is F</etc/xdg/xde-panel/${PROFILE}/rc.xml>.  If such a file exists, it
will be copied to the user's configuration home directory and used as
the configuration file.

=head1 FILES

=over

=item F</etc/xdg/xde/autostart/xde-panel.desktop>

A F<.desktop> file is also provided so that the panel will autostart for
the appropriate desktop environments and window manager names.

=item F</etc/xdg/xde/xde-panel/${WMNAME}/rc.xml>

A set of F<rc.xml> L<perlpanel(1)> configuration files is provided that
should be installed in the user's home directory when changes are made
to the configuration files.  This is so that different window managers
under XDE can provide different defaults for the panel.

=back

=head1 BUGS

B<xde-panel> should copy the default configuration file for the window
manager to the user's directory F<$XDG_CONFIG_HOME> if the file does not
already exist (or exists with an outdated version) in much the same
manner as is done for window manager configuration files.

B<xde-panel> should place a copy should be placed in the F<$XDG_RUN_DIR>
directory so that multiple sessions on multiple hosts for the same user
do not conflict for NFG mounted home directories.

B<xde-panel> should wait for a window manager to appear before
initialization and should not rely on the C<AutostartPhase> to properly
order the startup sequence.

=head1 HISTORY

B<xde-panel> was originally part of the F<xde-tools> perl package;
however, most of the facilities of that package have been ported to
C<C>, so this package was split off into its own package.

=head1 AUTHOR

Brian Bidulock <bidulock@cpan.org>

=head1 SEE ALSO

L<perlpanel(1)>.

=cut

# vim: set sw=4 tw=72 nocin spell spelllang=en_ca:

